name: Docker-CI

on:
  push:
    branches: [docker]
  pull_request:
    types: [opened, edited, synchronize, reopened, ready_for_review]
    branches: [docker]

jobs:
  build-frontend-app:
    concurrency: 
      group: docker_ci-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@fd7ecdac7caf8e2c541a48c9bcc280aae59a8461 # master

      - name: Restore cache
        uses: actions/cache/restore@v3
        id: RestoreCache
        with:
          path: .docker-cargo-cache
          key: docker-cargo-cache_${{ runner.os }}

      - name: Build the app
        id: Build
        run: |
          mkdir -p .docker-cargo-cache

          cd frontend/scripts/docker-buildfiles
          sed -i \
            -e 's|^#CI-CACHE-INJECT-MARKER:.*|COPY .docker-cargo-cache /cargo-cache|' \
            -e 's|^#CI-CACHE-RETRIEVE-MARKER:.*|COPY --from=builder /cargo-cache /cargo-cache|' \
            Dockerfile
          cat Dockerfile

          # uses the format which `find -newerat $date` wants
          echo "APP_BUILD_START_TIME=$(date -u '+%Y-%m-%d %H:%M:%S')" >> "$GITHUB_ENV"

          uid="$(id -u)"
          gid="$(id -g)"
          docker-compose build \
            --build-arg "uid=$uid" \
            --build-arg "gid=$gid" \
            --progress=plain \
          | while read line; do \
              if [[ "$line" =~ ^Step[[:space:]] ]]; then \
                echo "$(date -u '+%H:%m:%S') | $line"; \
              else \
                echo "$line"; \
              fi; \
            done \

          echo "BUILD_UID=$uid" >> "$GITHUB_ENV"
          echo "BUILD_GID=$gid" >> "$GITHUB_ENV"

      - name: Retrieve build cache
        id: RetrieveBuildCache
        if: ${{ github.ref == 'refs/heads/docker' && steps.Build.outcome == 'success' }}
        run: |
          # fetch build artifacts from the Docker image
          mkdir .tmp
          chown "$BUILD_UID:$BUILD_GID" .tmp
          docker run --rm \
            -v "$PWD"/.tmp:/cache \
            --entrypoint cp appflowy/appflowy:latest --preserve=mode,timestamps /cargo-cache /cache
          mv .tmp/cargo-cache .docker-cargo-cache
          rm -rf .tmp

          # clean up stale build artifacts
          find .docker-cargo-cache -print -type f -not -newerat "$APP_BUILD_START_TIME" -delete

      - name: Save cache
        if: ${{ github.ref == 'refs/heads/docker' && steps.RetrieveBuildCache.outcome == 'success' }}
        uses: actions/cache/save@v3
        with:
          path: .docker-cargo-cache
          key: ${{ steps.RestoreCache.outputs.cache-primary-key }}
